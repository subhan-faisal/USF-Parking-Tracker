@model USFParkingTracker.Models.ViewModels.DashboardViewModel
@{
    ViewData["Title"] = "Parking Availability Dashboard";
}

<div class="container">
    <h2 class="my-4">@ViewData["Title"]</h2>
    
    <div class="card shadow mb-4">
        <div class="card-body">
            <div class="row">
                <div class="col-md-4">
                    <div class="bg-light rounded p-3 text-center">
                        <h3 class="text-muted">Total Parking Spaces</h3>
                        <p class="display-4 font-weight-bold">@Model.Stats.TotalSpaces.ToString("N0")</p>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="bg-light rounded p-3 text-center">
                        <h3 class="text-muted">Available Now</h3>
                        <p class="display-4 font-weight-bold text-success">@Model.Stats.AvailableSpaces.ToString("N0")</p>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="bg-light rounded p-3 text-center">
                        <h3 class="text-muted">Occupancy Rate</h3>
                        <p class="display-4 font-weight-bold text-primary">@Model.Stats.OccupancyRate%</p>
                    </div>
                </div>
            </div>
            
            <div class="text-right mt-3">
                <p id="lastUpdated" class="text-muted small">Last updated: @Model.Stats.LastUpdated.ToString("MMM dd, yyyy 'at' h:mm tt")</p>
                <p id="pageLastUpdated" class="text-muted small">Page Last Updated: never</p> 
                <button id="refreshButton" class="btn btn-primary btn-sm">
                    <i class="bi bi-arrow-repeat"></i> Refresh Data
                </button>
            </div>

        </div>
    </div>
    
    <div class="row">
        @if (Model.ParkingLots.Any())
        {
            @foreach (var lot in Model.ParkingLots)
            {
                <div class="col-md-4 mb-4">
                    <div class="card shadow h-100">
                        <div class="card-header bg-white border-bottom">
                            <h5 class="card-title mb-0">@lot.Name</h5>
                            <small class="text-muted">@lot.Type</small>
                        </div>
                        <div class="card-body">
                            <div class="d-flex justify-content-between mb-3">
                                <div>
                                    <p class="text-muted mb-0">Available Spaces</p>
                                    <p class="h3 @GetStatusTextColor(lot.Status)">
                                        @lot.AvailableSpaces / @lot.TotalSpaces
                                    </p>
                                </div>
                                <div class="text-right">
                                    <p class="text-muted mb-0">Status</p>
                                    <p class="h5 @GetStatusTextColor(lot.Status)">
                                        @lot.Status.ToUpper()
                                    </p>
                                </div>
                            </div>
                            
                            @{
                                int availabilityPercentage = lot.TotalSpaces > 0 
                                    ? (int)Math.Round((double)lot.AvailableSpaces / lot.TotalSpaces * 100) 
                                    : 0;
                            }
                            
                            <div class="mb-3">
                                <div class="progress" style="height: 10px;">
                                    <div class="progress-bar @GetStatusBarColor(lot.Status)" 
                                         role="progressbar" 
                                         style="width: @availabilityPercentage%;" 
                                         aria-valuenow="@availabilityPercentage" 
                                         aria-valuemin="0" 
                                         aria-valuemax="100">
                                    </div>
                                </div>
                                <p class="text-muted small mt-1">@availabilityPercentage% Available</p>
                            </div>
                            
                            <div class="d-flex">
                                <button type="button" class="btn btn-link p-0 text-primary" 
                                        data-toggle="modal" data-target="#lotDetails-@lot.Id">
                                    View Details
                                </button>
                                <a href="@Url.Action("Map", "Home")" class="btn btn-link p-0 text-primary ml-3"
                                   onclick="sessionStorage.setItem('selectedLotId', '@lot.Id');">
                                    View on Map
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Details Modal -->
                <div class="modal fade" id="lotDetails-@lot.Id" tabindex="-1" role="dialog" aria-hidden="true">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">@lot.Name</h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                <p class="text-muted">@lot.Type</p>
                                <div class="row mb-3">
                                    <div class="col-6">
                                        <p class="mb-1 font-weight-bold">Total Spaces</p>
                                        <p>@lot.TotalSpaces</p>
                                    </div>
                                    <div class="col-6">
                                        <p class="mb-1 font-weight-bold">Available</p>
                                        <p class="@GetStatusTextColor(lot.Status)">@lot.AvailableSpaces</p>
                                    </div>
                                </div>
                                <p class="mb-1 font-weight-bold">Status</p>
                                <p class="@GetStatusTextColor(lot.Status)">@lot.Status.ToUpper()</p>
                                
                                @if (lot.Coordinates != null)
                                {
                                    <p class="mb-1 font-weight-bold">Location</p>
                                    <p>Lat: @lot.Coordinates.Lat.ToString("F4"), Lng: @lot.Coordinates.Lng.ToString("F4")</p>
                                }
                                
                                <p class="mb-1 font-weight-bold">Last Updated</p>
                                <p>@lot.UpdatedAt.ToString("MM/dd/yyyy h:mm tt")</p>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12 text-center py-5">
                <p class="text-muted">No parking lots available. Add some in the Manage section.</p>
                <a asp-controller="Manage" asp-action="Create" class="btn btn-primary">
                    Add Parking Lot
                </a>
            </div>
        }
    </div>
</div>

@functions {
    string GetStatusTextColor(string status)
    {
        return status switch
        {
            "open" => "text-success",
            "limited" => "text-warning",
            "full" => "text-danger",
            "closed" => "text-secondary",
            _ => "text-primary"
        };
    }
    
    string GetStatusBarColor(string status)
    {
        return status switch
        {
            "open" => "bg-success",
            "limited" => "bg-warning",
            "full" => "bg-danger",
            "closed" => "bg-secondary",
            _ => "bg-primary"
        };
    }
}

<script>
document.addEventListener('DOMContentLoaded', function() {
    const refreshButton = document.getElementById('refreshButton');
    const lastUpdatedElem = document.getElementById('lastUpdated');
    const pageLastUpdatedElem = document.getElementById('pageLastUpdated');
    const parkingLotCards = document.querySelectorAll('.card'); // Select all parking lot cards

    if (refreshButton) {
        refreshButton.addEventListener('click', async () => {
            try {
                // Fetch fresh data from the backend (API)
                const response = await fetch('/api/parking-lots');
                const data = await response.json();

                // Update each parking lot card with new data
                data.forEach(lot => {
                    const card = document.getElementById(`lot-card-${lot.Id}`); // Assuming each card has a unique id
                    if (card) {
                        // Update the "Available Spaces"
                        const availableSpacesElem = card.querySelector('.available-spaces');
                        if (availableSpacesElem) {
                            availableSpacesElem.textContent = `${lot.AvailableSpaces} / ${lot.TotalSpaces}`;
                        }

                        // Update the "Status"
                        const statusElem = card.querySelector('.lot-status');
                        if (statusElem) {
                            statusElem.textContent = lot.Status.toUpperCase();
                            statusElem.classList = `h5 ${getStatusTextColor(lot.Status)}`; // Update text color based on status
                        }

                        // Update the "Progress bar" width and text
                        const progressBar = card.querySelector('.progress-bar');
                        if (progressBar) {
                            const availabilityPercentage = lot.TotalSpaces > 0 
                                ? (lot.AvailableSpaces / lot.TotalSpaces) * 100 
                                : 0;
                            progressBar.style.width = `${availabilityPercentage}%`;
                            progressBar.setAttribute('aria-valuenow', availabilityPercentage);
                        }
                    }
                });

                // Update "Last updated" time with current time (for data)
                const now = new Date();
                const formattedTime = now.toLocaleString("en-US", {
                    weekday: "short", 
                    year: "numeric", 
                    month: "short", 
                    day: "numeric", 
                    hour: "2-digit", 
                    minute: "2-digit",
                    hour12: true
                });
                if (lastUpdatedElem) {
                    lastUpdatedElem.innerText = `Last updated: ${formattedTime}`;
                }

                // Update "Page Last Updated" with the current time (refresh time)
                const refreshTime = now.toLocaleString("en-US", {
                    weekday: "short", 
                    year: "numeric", 
                    month: "short", 
                    day: "numeric", 
                    hour: "2-digit", 
                    minute: "2-digit",
                    hour12: true
                });
                if (pageLastUpdatedElem) {
                    pageLastUpdatedElem.innerText = `Page Last Updated: ${refreshTime}`;
                }

            } catch (err) {
                console.error("Refresh failed:", err);
            }
        });
    }
});

// Helper functions to determine color based on status
function getStatusTextColor(status) {
    switch (status) {
        case 'open': return 'text-success';
        case 'limited': return 'text-warning';
        case 'full': return 'text-danger';
        case 'closed': return 'text-secondary';
        default: return 'text-primary';
    }
}

</script>

